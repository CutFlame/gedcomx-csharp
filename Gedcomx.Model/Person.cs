using Gx.Records;
// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;
using System.Collections.Generic;

namespace Gx.Conclusion
{

    /// <remarks>
    ///  A person.
    /// </remarks>
    /// <summary>
    ///  A person.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://gedcomx.org/v1/", TypeName = "Person")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace = "http://gedcomx.org/v1/", TypeName = "Person")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://gedcomx.org/v1/", ElementName = "person")]
    public partial class Person : Gx.Conclusion.Subject
    {

        private bool? _principal;
        private bool _principalSpecified;
        private bool? _private;
        private bool _privateSpecified;
        private bool? _living;
        private bool _livingSpecified;
        private Gx.Conclusion.Gender _gender;
        private System.Collections.Generic.List<Gx.Conclusion.Name> _names;
        private System.Collections.Generic.List<Gx.Conclusion.Fact> _facts;
        private System.Collections.Generic.List<Gx.Records.Field> _fields;
        private Gx.Conclusion.DisplayProperties _displayExtension;
        /// <summary>
        ///  Whether this person is the &quot;principal&quot; person extracted from the record.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "principal")]
        [System.Xml.Serialization.SoapAttributeAttribute(AttributeName = "principal")]
        public bool Principal
        {
            get
            {
                return this._principal.GetValueOrDefault();
            }
            set
            {
                this._principal = value;
                this._principalSpecified = true;
            }
        }

        /// <summary>
        ///  Property for the XML serializer indicating whether the "Principal" property should be included in the output.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        [System.Xml.Serialization.SoapIgnoreAttribute]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PrincipalSpecified
        {
            get
            {
                return this._principalSpecified;
            }
            set
            {
                this._principalSpecified = value;
            }
        }

        /// <summary>
        ///  Whether this person has been designated for limited distribution or display.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "private")]
        [System.Xml.Serialization.SoapAttributeAttribute(AttributeName = "private")]
        public bool Private
        {
            get
            {
                return this._private.GetValueOrDefault();
            }
            set
            {
                this._private = value;
                this._privateSpecified = true;
            }
        }

        /// <summary>
        ///  Property for the XML serializer indicating whether the "Private" property should be included in the output.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        [System.Xml.Serialization.SoapIgnoreAttribute]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PrivateSpecified
        {
            get
            {
                return this._privateSpecified;
            }
            set
            {
                this._privateSpecified = value;
            }
        }

        /// <summary>
        ///  Living status of the person as treated by the system.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "living", Namespace = "http://gedcomx.org/v1/")]
        [System.Xml.Serialization.SoapElementAttribute(ElementName = "living")]
        public bool Living
        {
            get
            {
                return this._living.GetValueOrDefault();
            }
            set
            {
                this._living = value;
                this._livingSpecified = true;
            }
        }

        /// <summary>
        ///  Property for the XML serializer indicating whether the "Living" property should be included in the output.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        [System.Xml.Serialization.SoapIgnoreAttribute]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LivingSpecified
        {
            get
            {
                return this._livingSpecified;
            }
            set
            {
                this._livingSpecified = value;
            }
        }

        /// <summary>
        ///  The gender conclusion for the person.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "gender", Namespace = "http://gedcomx.org/v1/")]
        [System.Xml.Serialization.SoapElementAttribute(ElementName = "gender")]
        public Gx.Conclusion.Gender Gender
        {
            get
            {
                return this._gender;
            }
            set
            {
                this._gender = value;
            }
        }
        /// <summary>
        ///  The name conclusions for the person.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "name", Namespace = "http://gedcomx.org/v1/")]
        [System.Xml.Serialization.SoapElementAttribute(ElementName = "name")]
        public System.Collections.Generic.List<Gx.Conclusion.Name> Names
        {
            get
            {
                return this._names;
            }
            set
            {
                this._names = value;
            }
        }
        /// <summary>
        ///  The fact conclusions for the person.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "fact", Namespace = "http://gedcomx.org/v1/")]
        [System.Xml.Serialization.SoapElementAttribute(ElementName = "fact")]
        public System.Collections.Generic.List<Gx.Conclusion.Fact> Facts
        {
            get
            {
                return this._facts;
            }
            set
            {
                this._facts = value;
            }
        }
        /// <summary>
        ///  The references to the record fields being used as evidence.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "field", Namespace = "http://gedcomx.org/v1/")]
        [System.Xml.Serialization.SoapElementAttribute(ElementName = "field")]
        public System.Collections.Generic.List<Gx.Records.Field> Fields
        {
            get
            {
                return this._fields;
            }
            set
            {
                this._fields = value;
            }
        }
        /// <summary>
        ///  Display properties for the person. Display properties are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "display", Namespace = "http://gedcomx.org/v1/")]
        [System.Xml.Serialization.SoapElementAttribute(ElementName = "display")]
        public Gx.Conclusion.DisplayProperties DisplayExtension
        {
            get
            {
                return this._displayExtension;
            }
            set
            {
                this._displayExtension = value;
            }
        }

        /// <summary>
        /// Embed the specified person into this one.
        /// </summary>
        /// <param name="person">The person to embed.</param>
        public void Embed(Person person)
        {
            this._private = this._private == null ? person._private : this._private;
            this._living = this._living == null ? person._living : this._living;
            this._principal = this._principal == null ? person._principal : this._principal;
            this._gender = this._gender == null ? person._gender : this._gender;
            if (this._displayExtension != null && person._displayExtension != null)
            {
                this._displayExtension.Embed(person._displayExtension);
            }
            else if (person._displayExtension != null)
            {
                this._displayExtension = person._displayExtension;
            }
            if (person._names != null)
            {
                this._names = this._names == null ? new List<Name>() : this._names;
                this._names.AddRange(person._names);
            }
            if (person._facts != null)
            {
                this._facts = this._facts == null ? new List<Fact>() : this._facts;
                this._facts.AddRange(person._facts);
            }
            if (person._fields != null)
            {
                this._fields = this._fields == null ? new List<Field>() : this._fields;
                this._fields.AddRange(person._fields);
            }
            base.Embed(person);
        }
    }
}
