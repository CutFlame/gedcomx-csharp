// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;
using System.Collections.Generic;

namespace Gx.Common
{

    /// <remarks>
    ///  A set of data that supports extension elements.
    /// </remarks>
    /// <summary>
    ///  A set of data that supports extension elements.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://gedcomx.org/v1/", TypeName = "ExtensibleData")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace = "http://gedcomx.org/v1/", TypeName = "ExtensibleData")]
    public abstract partial class ExtensibleData
    {

        private string _id;
        private List<System.Xml.XmlElement> _extensionElements;
        /// <summary>
        ///  A local, context-specific id for the data.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "id", DataType = "ID")]
        [System.Xml.Serialization.SoapAttributeAttribute(AttributeName = "id", DataType = "ID")]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        /// <summary>
        ///  Custom extension elements for a conclusion.
        /// </summary>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public List<System.Xml.XmlElement> ExtensionElements
        {
            get
            {
                return this._extensionElements;
            }
            set
            {
                this._extensionElements = value;
            }
        }

        internal virtual void Embed(ExtensibleData data)
        {
            if (data._extensionElements != null)
            {
                this._extensionElements = this._extensionElements == null ? new List<System.Xml.XmlElement>() : this._extensionElements;
                this._extensionElements.AddRange(data._extensionElements);
            }
        }
    }
}
