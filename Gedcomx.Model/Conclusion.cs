using Gx.Common;
using Gx.Source;
// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;
using System.Collections.Generic;

namespace Gx.Conclusion
{

    /// <remarks>
    ///  A genealogical conclusion.
    /// </remarks>
    /// <summary>
    ///  A genealogical conclusion.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://gedcomx.org/v1/", TypeName = "Conclusion")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace = "http://gedcomx.org/v1/", TypeName = "Conclusion")]
    public abstract partial class Conclusion : Gx.Links.HypermediaEnabledData
    {

        private string _confidence;
        private string _sortKey;
        private string _lang;
        private Gx.Common.Attribution _attribution;
        private System.Collections.Generic.List<Gx.Source.SourceReference> _sources;
        private Gx.Common.ResourceReference _analysis;
        private System.Collections.Generic.List<Gx.Common.Note> _notes;
        /// <summary>
        ///  The level of confidence the contributor has about the data.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "confidence")]
        [System.Xml.Serialization.SoapAttributeAttribute(AttributeName = "confidence")]
        public string Confidence
        {
            get
            {
                return this._confidence;
            }
            set
            {
                this._confidence = value;
            }
        }

        /// <summary>
        ///  Convenience property for treating Confidence as an enum. See Gx.Types.ConfidenceLevelQNameUtil for details on getter/setter functionality.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        public Gx.Types.ConfidenceLevel KnownConfidence
        {
            get
            {
                return Gx.Types.ConfidenceLevelQNameUtil.ConvertFromKnownQName(this._confidence);
            }
            set
            {
                this._confidence = Gx.Types.ConfidenceLevelQNameUtil.ConvertToKnownQName(value);
            }
        }
        /// <summary>
        ///  A sort key in relation to other facts for display purposes.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "sortKey")]
        [System.Xml.Serialization.SoapAttributeAttribute(AttributeName = "sortKey")]
        public string SortKey
        {
            get
            {
                return this._sortKey;
            }
            set
            {
                this._sortKey = value;
            }
        }
        /// <summary>
        ///  The language of the conclusion.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "lang", Namespace = "http://www.w3.org/XML/1998/namespace")]
        [System.Xml.Serialization.SoapAttributeAttribute(AttributeName = "lang", Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string Lang
        {
            get
            {
                return this._lang;
            }
            set
            {
                this._lang = value;
            }
        }
        /// <summary>
        ///  Attribution metadata for a conclusion.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "attribution", Namespace = "http://gedcomx.org/v1/")]
        [System.Xml.Serialization.SoapElementAttribute(ElementName = "attribution")]
        public Gx.Common.Attribution Attribution
        {
            get
            {
                return this._attribution;
            }
            set
            {
                this._attribution = value;
            }
        }
        /// <summary>
        ///  The source references for a conclusion.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "source", Namespace = "http://gedcomx.org/v1/")]
        [System.Xml.Serialization.SoapElementAttribute(ElementName = "source")]
        public System.Collections.Generic.List<Gx.Source.SourceReference> Sources
        {
            get
            {
                return this._sources;
            }
            set
            {
                this._sources = value;
            }
        }
        /// <summary>
        ///  A reference to the analysis document explaining the analysis that went into this conclusion.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "analysis", Namespace = "http://gedcomx.org/v1/")]
        [System.Xml.Serialization.SoapElementAttribute(ElementName = "analysis")]
        public Gx.Common.ResourceReference Analysis
        {
            get
            {
                return this._analysis;
            }
            set
            {
                this._analysis = value;
            }
        }
        /// <summary>
        ///  Notes about a person.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "note", Namespace = "http://gedcomx.org/v1/")]
        [System.Xml.Serialization.SoapElementAttribute(ElementName = "note")]
        public System.Collections.Generic.List<Gx.Common.Note> Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                this._notes = value;
            }
        }

        internal override void Embed(ExtensibleData conclusion)
        {
            var value = (Conclusion)conclusion;
            this._lang = this._lang == null ? value._lang : this._lang;
            this._confidence = this._confidence == null ? value._confidence : this._confidence;
            this._attribution = this._attribution == null ? value._attribution : this._attribution;
            this._analysis = this._analysis == null ? value._analysis : this._analysis;
            if (value._notes != null)
            {
                this._notes = this._notes == null ? new List<Note>() : this._notes;
                this._notes.AddRange(value._notes);
            }
            if (value._sources != null)
            {
                this._sources = this._sources == null ? new List<SourceReference>() : this._sources;
                this._sources.AddRange(value._sources);
            }
            base.Embed(conclusion);
        }
    }
}
